jobs:
  build:
    docker:
      - image: python:3.6                   # similar to "image" in GitLab
    steps:
      - checkout
      - run: |                              # similar to "script" in GitLab
          pip install -r requirements.txt
          python manage.py check

  test:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: |
          pip install -r requirements.txt
          python manage.py test taskManager

  oast:
    machine: true
    steps:
      - checkout

      - run:
          command: docker run -v $(pwd):/src --rm hysnsec/safety check -r /src/requirements.txt --json | tee oast-results.json
          when: on_fail             # Even if the job fails, continue to the next stages

      - store_artifacts:
          path: oast-results.json
          destination: safety-artifact
          when: always

  oast-frontend:
    machine: true
    steps:
      - checkout

      - run:
          command: docker run --rm -v $(pwd):/src -w /src hysnsec/retire --outputformat json --outputpath retirejs-output.json --severity high
          when: on_fail             # Even if the job fails, continue to the next stages

      - store_artifacts:
          path: retirejs-output.json
          destination: retirejs-artifact
          when: always

  secret_scanning:
    machine: true
    steps:
      - checkout

      - run:
          command: docker run --rm -v $(pwd):/src hysnsec/trufflehog file:///src --json > trufflehog-output.json
          when: on_fail             # Even if the job fails, continue to the next stages

      - store_artifacts:
          path: trufflehog-output.json
          destination: trufflehog-artifact
          when: always
  
  sast:
    machine: true
    steps:
      - checkout

      - run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json -o /src/bandit-output.json
        when: on_fail             # Even if the job fails, continue to the next stages

      - store_artifacts:
          path: bandit-output.json
          destination: bandit-artifact
          when: always
  
  integration:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run:
          command: |
            echo "This is an integration step"
            exit 1
          when: on_fail                    # Even if the job fails, continue to the next stages

  prod:
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: echo "This is a deploy step"

workflows:
  version: 2
  django:
    jobs:
      - build
      - test:
          requires:
            - build
      - oast:
          requires:
            - test
      - oast-frontend:
          requires:
            - test
      - secret_scanning:
          requires:
            - test
      - sast:
          requires:
            - oast-frontend
      - integration:
          requires:
            - oast
      - prod:
          type: approval
          requires:
            - integration
